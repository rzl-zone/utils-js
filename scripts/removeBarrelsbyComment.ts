import fs from "fs";
import path from "path";

import { BUILD_LOGGER } from "./utils/logger";

const targetDir = "./src";

let barrelRemoved = 0;

BUILD_LOGGER.ON_STARTING({
  actionName: "Removing Barrelsby Comment"
});

function removeBarrelsbyComment(filePath: string) {
  const content = fs.readFileSync(filePath, "utf-8");

  const barrelsbyCommentRegex =
    /\/\*\*\n\s*\*\s*@file Automatically generated by barrelsby\.\n\s*\*\/*/g;

  let newContent = content.replace(barrelsbyCommentRegex, "");

  newContent = newContent.replace(/^\s*\n*/, "");

  if (newContent !== content) {
    fs.writeFileSync(filePath, newContent, "utf-8");
    // console.log(`ðŸŸ¢ Removed barrelsby comment from ${filePath}`);

    BUILD_LOGGER.ON_PROCESS({
      actionName: "Removing Barrelsby Comment",
      count: barrelRemoved,
      nameDirect: filePath
    });
  }
}

function walkDir(dir: string) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  for (const [idx, file] of fs.readdirSync(dir).sort().entries()) {
    const fullPath = path.join(dir, file);
    if (fs.statSync(fullPath).isDirectory()) {
      walkDir(fullPath);
    } else if (
      fullPath.endsWith("index.d.ts") ||
      fullPath.endsWith("index.ts") ||
      fullPath.endsWith("index.tsx") ||
      fullPath.endsWith("index.cjs") ||
      fullPath.endsWith("index.js")
    ) {
      barrelRemoved++;
      removeBarrelsbyComment(fullPath);
    }
  }
}

walkDir(targetDir);

if (barrelRemoved > 0) {
  BUILD_LOGGER.ON_FINISH({
    actionName: "Removing Barrelsby Comment",
    atFolder: `'${targetDir}'`,
    count: barrelRemoved
  });
} else {
  BUILD_LOGGER.ON_SKIPPING({
    actionName: "Removing Barrelsby Comment",
    reasonEndText: "removing"
  });
}
